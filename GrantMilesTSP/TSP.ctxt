#BlueJ class context
comment0.target=TSP
comment0.text=\r\n\ Simple\ GA\ for\ the\ Travelling\ Salesman\ Problem.\r\n\ \r\n\ @author\ (your\ name)\ \r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=mutation\ crossover\ selection
comment1.target=TSP(java.lang.String,\ java.lang.String,\ java.lang.String)
comment1.text=\r\n\ Constructor\ that\ allows\ the\ choosing\ of\ which\ type\ of\ crossover\ to\ use.\r\n\ @param\ mutation\ -\ This\ can\ be\ "sim"\ for\ Simple\ Inversion\ Mutation\ or\ "em"\ for\ Exchange\ Mutation\r\n\ @param\ crossover\ -\ This\ can\ be\ "cx"\ for\ Cycle\ Crossover\ or\ "pmx"\ for\ Partially\ Mapped\ Crossover\r\n
comment10.params=first\ second
comment10.target=int[][]\ partiallyMappedCrossover(int,\ int)
comment10.text=\r\n\ This\ crossover\ method\ uses\ the\ PMX\ (Partially\ Mapped\ Crossover)\r\n
comment11.params=newPopulation\ offspring\ position
comment11.target=void\ copy(int[][],\ int[],\ int)
comment11.text=\r\n\ Utility\ method\ to\ copy\ offspring\ into\ the\ main\ population\ at\ a\ given\ position\r\n
comment12.params=
comment12.target=void\ initialise()
comment12.text=\r\n\ Initialise\ the\ population\ of\ individuals.\r\n
comment13.params=
comment13.target=void\ testPopulation()
comment13.text=\r\n\ Test\ to\ make\ sure\ there\ are\ no\ duplications\r\n
comment14.params=
comment14.target=void\ calculateFitness()
comment14.text=\r\n\ Calculate\ the\ fitness\ by\ adding\ up\ the\ values\ in\ the\ cost\ matrix\ between\ each\ node\ in\ the\ individual\ sequence\r\n
comment15.params=index
comment15.target=int\ getFitness(int)
comment16.params=
comment16.target=int\ tournamentSelect()
comment16.text=\r\n\ Select\ using\ the\ Tournament\ method\r\n
comment17.params=
comment17.target=int\ rouletteSelect()
comment17.text=\r\n\ Select\ method\ that\ implements\ the\ Roulette\ Method\r\n
comment18.params=filename
comment18.target=void\ load(java.lang.String)
comment18.text=\r\n\ Loads\ the\ TSP\ file.\ This\ method\ will\ initialise\ the\ variables\r\n\ size\ and\ COST.\r\n
comment19.params=first\ second
comment19.target=int[][]\ crossoverTest(int[],\ int[])
comment19.text=\r\n\ USED\ ONLY\ DURING\ THE\ TESTING\ OF\ THIS\ METHOD\r\n
comment2.params=mutation\ crossover\ selection\ population\ maxGen
comment2.target=TSP(java.lang.String,\ java.lang.String,\ java.lang.String,\ int,\ int)
comment2.text=\r\n\ Constructor\ used\ for\ overnight\ testing.\ Set\ population\ and\ maximum\ generations\r\n
comment20.params=first\ second
comment20.target=int[][]\ testCycle(int[],\ int[])
comment20.text=\r\n\ USED\ ONLY\ DURING\ THE\ TESTING\ OF\ THIS\ TYPE\ OF\ METHOD\r\n
comment3.params=
comment3.target=TSP()
comment3.text=\r\n\ Overridden\ construcotr\ to\ set\ standard\ values.\r\n
comment4.params=filename
comment4.target=void\ run(java.lang.String)
comment4.text=\r\n\ Starts\ the\ execution\ of\ the\ GA.\r\n\ \r\n\ @param\ filename\ the\ TSP\ file\ instance.\r\n
comment5.params=
comment5.target=int\ getBest()
comment5.text=\r\n\ This\ function\ returns\ the\ index\ of\ the\ individual\ with\ the\ best\ fitness\r\n
comment6.params=index
comment6.target=int[]\ simpleInversionMutation(int)
comment6.text=\r\n\ This\ mutation\ method\ implements\ the\ Simple\ Inversion\ Mutation\ (SIM)\r\n
comment7.params=index
comment7.target=int[]\ exchangeMutation(int)
comment7.text=\r\n\ This\ mutation\ method\ implements\ exchange\ mutation\r\n
comment8.params=first\ second
comment8.target=int[][]\ cycleCrossover(int,\ int)
comment8.text=\r\n\ This\ crossover\ funciton\ implements\ the\ Cycle\ Crossover\r\n
comment9.params=parent\ workingNode
comment9.target=int\ getWorkingIndex(int[],\ int)
numComments=21
